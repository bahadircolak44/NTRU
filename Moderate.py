from ntru import *
from poly import *
import time

def EntityI(h_j,e_j):
    global count
    N=167
    p=3
    q=128
    Bob=Ntru(N,p,q)
    f_i=[1,1,1,-1,1,-1,0,-1,1,0,1,-1,-1]
    g_i=[1,-1,1,-1,1,1,0,-1,1,-1,-1]
    d=5
    ranPol_i=[-1,-1,1,-1,-1,1,-1,1,1,1]
    timestamp3 = time.time()
    Bob.genPublicKey(f_i,g_i,d)
    timestamp4 = time.time()
    print "GEN PUBLIC KEY %.2f seconds" % (timestamp4 - timestamp3)
    if count==1:
        print "---------------------------------------------------------------STEP1------------------------------------------------"
        print "Bob Will Generate his Public Key using Parameters"
        print "F = ",f_i
        print "G = ",g_i
        print "d   = ",d
        h_i=Bob.getPublicKey()
        print "Public Key is Generated by Bob: ",h_i
        print "Public key is sending from Alice..."
        print "Count = ",count
        count=count+1
        (h_j,e_j)= EntityJ(h_i,0)  
    if count==3:
        print "---------------------------------------------------------------STEP3------------------------------------------------"
        print "Hj = ",h_j
        print "Ej = ", e_j
        Bob.setPublicKey(h_j)
        count=count+1
        print "Count = ",count-1
        timestamp4 = time.time()        
        e_i=Bob.encrypt(f_i,ranPol_i)
        timestamp3 = time.time()
        print "ENTITYI ENCRYPTION TIME %.2f seconds" % (timestamp3 - timestamp4)
        print "Ei: ",e_i
        K_j=EntityJ(0,e_i)
        print "---------------------------------------------------------------STEP5------------------------------------------------"
        timestamp4 = time.time()
        K_i= Bob.decrypt(e_j)
        timestamp3 = time.time()
        print "ENTITYI DECRYPTION TIME %.2f seconds" % (timestamp3 - timestamp4)
        print "Ki = ",K_i
        if(K_i == K_j):
            print "Key Exchange have been completed successfully.."

def EntityJ(h_i,e_i):
    global count
    N=167
    p=3
    q=128
    Alice=Ntru(N,p,q)
    f_j=[1,0,-1,-1,-1,1,1,1,1,0,1,-1,-1]
    g_j=[-1,1,-1,1,1,1,0,-1,-1,-1,1]
    d=5
    ranPol_j=[1,1,-1,-1,-1,-1,-1,1,-1,1]
    Alice.genPublicKey(f_j,g_j,d)
    if count==2:
        print "---------------------------------------------------------------STEP2------------------------------------------------"
        print "Public key h_i receiving by Alice: ",h_i
        print "Alice Will Generate her Public Key using Parameters"
        print "f(x)= ",f_j
        print "g(x)= ",g_j
        print "d   = ",d
        print "Alice's Random Polynomial  : ",ranPol_j
        h_j= Alice.getPublicKey()
        print "Public Key Hj Generated by Alice: ",h_j
        print "Alice Will Create Ej using parameters: ",f_j, " and " , ranPol_j  
        Alice.setPublicKey(h_i)
        e_j=Alice.encrypt(f_j,ranPol_j)
        print "Encrypted Message Ej = ", e_j
        print "Mesaage and Public Key sendinng from Bob..."
        count=count+1
        print "Count = ",count-1
        return (h_j,e_j)         
    if(count ==4):
        print "---------------------------------------------------------------STEP4------------------------------------------------"

        K_j= Alice.decrypt(e_i)
        print "Kj = ",K_j
        count=count+1
        print "Count = ",count-1
        return K_j

count =1
timestamp1 = time.time()
EntityI(0,0)
timestamp2 = time.time()
print "This took %.2f seconds" % (timestamp2 - timestamp1)
input()
